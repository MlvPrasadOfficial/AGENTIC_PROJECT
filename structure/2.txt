# UI/UX DESIGN SYSTEM - Agentic Copilot

# Comprehensive Glassmorphism Design Specification & Component Library

## 🎨 DESIGN PHILOSOPHY

### Design Principles

1. **Glassmorphism**: Modern glass-like aesthetic, layered depth, transparency, and blur effects
2. **Desktop-First**: Optimized for desktop data workflows
3. **Dark Theme Priority**: Dark base with luminous glass accents for low eye strain
4. **Data-Centric**: All layouts enhance comprehension and visual analysis
5. **Accessibility**: Full keyboard nav, WCAG 2.1 AA color/contrast
6. **Performance**: Lightweight CSS, minimal JS for fast, smooth interaction

---

## 🌈 COLOR SYSTEM

### Primary Palette (CSS Custom Props)

```css
--primary-blue: #3B82F6;
--primary-blue-light: #60A5FA;
--primary-blue-dark: #1D4ED8;
--accent-purple: #8B5CF6;
--accent-emerald: #10B981;
--accent-amber: #F59E0B;
--accent-red: #EF4444;
--gray-50: #F9FAFB;
--gray-100: #F3F4F6;
--gray-200: #E5E7EB;
--gray-300: #D1D5DB;
--gray-400: #9CA3AF;
--gray-500: #6B7280;
--gray-600: #4B5563;
--gray-700: #374151;
--gray-800: #1F2937;
--gray-900: #111827;
--gray-950: #030712;
```

### Glassmorphism Colors

```css
--glass-white: rgba(255,255,255,0.1);
--glass-white-hover: rgba(255,255,255,0.15);
--glass-dark: rgba(31,41,55,0.8);
--glass-border: rgba(255,255,255,0.2);
--glass-shadow: rgba(0,0,0,0.25);
```

### Semantic Usage Table

| Color         | Usage                | Context            |
| ------------- | -------------------- | ------------------ |
| Primary Blue  | CTAs, links, selects | Main actions       |
| Accent Purple | Secondary, highlight | Alt/support action |
| Emerald       | Success/complete     | Positive feedback  |
| Amber         | Warning/pending      | Caution            |
| Red           | Error/destructive    | Negative feedback  |

---

## 📝 TYPOGRAPHY SYSTEM

```css
/* Font Family */
font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI',
             'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;

/* Headings */
.text-4xl { font-size: 2.25rem; font-weight: 700; }
.text-2xl { font-size: 1.5rem; font-weight: 600; }
.text-lg  { font-size: 1.125rem; font-weight: 500; }
.text-base{ font-size: 1rem;    font-weight: 400; }
.text-sm  { font-size: 0.875rem;font-weight: 400; }
.text-xs  { font-size: 0.75rem; font-weight: 400; }
```

### Usage Guidelines

| Style               | Where Used        |
| ------------------- | ----------------- |
| text-4xl + bold     | Page titles       |
| text-2xl + semibold | Section headers   |
| text-lg + medium    | Card/agent titles |
| text-base + normal  | Body/content      |
| text-sm + medium    | Labels/side nav   |
| text-xs + normal    | Meta, footnotes   |

---

## 🧊 GLASSMORPHISM SPECS

```css
.glass-card {
  background: rgba(255,255,255,0.10);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255,255,255,0.2);
  border-radius: 16px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.25);
  transition: all 0.3s cubic-bezier(0.4,0,0.2,1);
}
.glass-card:hover {
  background: rgba(255,255,255,0.15);
  transform: translateY(-2px);
  box-shadow: 0 12px 40px rgba(0,0,0,0.3);
}
```

### Glass Variants

| Variant | Background             | Blur | Border | Use              |
| ------- | ---------------------- | ---- | ------ | ---------------- |
| Subtle  | rgba(255,255,255,0.05) | 8px  | 0.1    | BG/headers       |
| Default | rgba(255,255,255,0.1)  | 10px | 0.2    | Cards/agents     |
| Strong  | rgba(255,255,255,0.2)  | 16px | 0.3    | Modals/alerts    |
| Intense | rgba(255,255,255,0.25) | 20px | 0.4    | Primary overlays |

---

## 🧩 COMPONENT LIBRARY

### Buttons

```css
.btn-primary {
  background: linear-gradient(135deg, #3B82F6, #1D4ED8);
  color: white;
  font-weight: 600;
  padding: 12px 24px;
  border-radius: 12px;
  border: none;
  backdrop-filter: blur(10px);
  box-shadow: 0 4px 16px rgba(59,130,246,0.3);
  transition: all 0.2s;
}
.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(59,130,246,0.4);
  background: linear-gradient(135deg, #60A5FA, #3B82F6);
}
```

### Glass Input

```css
.input-glass {
  background: rgba(255,255,255,0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255,255,255,0.2);
  border-radius: 12px;
  padding: 12px 16px;
  color: white;
  font-size: 16px;
  transition: all 0.2s;
}
.input-glass:focus {
  border-color: #3B82F6;
  box-shadow: 0 0 0 3px rgba(59,130,246,0.1);
  background: rgba(255,255,255,0.15);
}
.input-glass::placeholder {
  color: rgba(255,255,255,0.6);
}
```

### Data/Metric Card

```css
.data-card {
  background: rgba(255,255,255,0.10);
  backdrop-filter: blur(12px);
  border: 1px solid rgba(255,255,255,0.2);
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.25);
}
```

### Sidebar/Navigation

```css
.sidebar-glass {
  background: rgba(31,41,55,0.9);
  backdrop-filter: blur(20px);
  border-right: 1px solid rgba(255,255,255,0.1);
  width: 260px;
  height: 100vh;
}
```

---

## 📱 RESPONSIVE SYSTEM

```css
@media (min-width: 640px) { /* sm */ }
@media (min-width: 1024px) { /* lg */ }
```

* Full desktop: 2 main columns + full-width D3.js chart below
* Tablet/mobile: columns stack, chart/card widths reduce

---

## 🎭 ANIMATION SYSTEM

* All interactive glass: `.glass-transition`, `.glass-fade-in` (see Glass specs)
* Standard easing: `cubic-bezier(0.4, 0, 0.2, 1)`
* Skeleton loaders/shimmer for loading states
* Animations always respect user "prefers-reduced-motion"

---

## ♿ ACCESSIBILITY

* All contrast ratios meet WCAG 2.1 AA
* Visible focus states on all components
* Full keyboard nav (tab, arrow keys)
* ARIA/semantic HTML for agent logs, alerts, modals, etc.
* High contrast & reduced motion media queries

---

## 📊 DATA VISUALIZATION

* All D3.js charts in `.chart-container` glass panel:

```css
.chart-container {
  background: rgba(255,255,255,0.05);
  backdrop-filter: blur(8px);
  border: 1px solid rgba(255,255,255,0.1);
  border-radius: 16px;
  padding: 24px;
}
.chart-tooltip {
  background: rgba(31,41,55,0.95);
  border: 1px solid rgba(255,255,255,0.2);
  border-radius: 8px;
  color: white;
  font-size: 14px;
}
```

* Chart palette: `#3B82F6`, `#8B5CF6`, `#10B981`, `#F59E0B`, `#EF4444`, `#06B6D4`
* Charts must be responsive and accessible (screen reader alt, ARIA)

---

## 🎯 DESIGN TOKENS

* Spacing: `--space-2: 0.5rem`, `--space-4: 1rem`, `--space-8: 2rem`, etc.
* Radius: `--radius-lg: 12px`, `--radius-xl: 16px`, `--radius-2xl: 20px`, etc.
* Shadows: `--shadow-glass-lg: 0 8px 32px rgba(0,0,0,0.25);`

---

## 📋 COMPONENT CHECKLIST

* [ ] TypeScript interfaces and props
* [ ] Responsive design and accessibility
* [ ] Glass system compliance
* [ ] Loading, error, and skeleton states
* [ ] Storybook docs and tests
* [ ] Only code/Copilot-generatable icons and SVGs (no external assets)

---

*This design system is engineered for Copilot-native, code-only, accessible, and visually premium glassmorphism UI for Agentic Copilot.*

---

## 🚀 Copilot-Native UI/UX Patterns & Additions

### 1. Agent Iconography (SVG in Code)

> All agent icons should be simple SVGs in `frontend/icons/`, generated in code.

```tsx
// CritiqueAgentIcon.tsx
export const CritiqueAgentIcon = () => (
  <svg width="24" height="24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="12" cy="12" r="10" opacity="0.5" />
    <path d="M8 15h8M8 11h8M9 7h6" />
  </svg>
);
```

* Use `currentColor` for dark/light mode, 24x24 or 32x32 size, color adapts to parent.

### 2. Glass-Styled Data Table (with Loading Skeleton)

```tsx
// DataTable.tsx
export function DataTable({ columns, data, loading }: { columns: string[], data: any[], loading: boolean }) {
  if (loading) return (
    <div className="data-card animate-pulse">
      {[...Array(5)].map((_, i) => (
        <div key={i} className="h-4 bg-gray-700 rounded mb-2 w-full glass-shimmer" />
      ))}
    </div>
  );
  return (
    <div className="data-card overflow-auto">
      <table className="min-w-full text-sm">
        <thead>
          <tr>
            {columns.map(col => <th className="font-semibold px-2 py-2 text-left" key={col}>{col}</th>)}
          </tr>
        </thead>
        <tbody>
          {data.map((row, i) => (
            <tr key={i}>
              {columns.map(col => <td className="px-2 py-2" key={col}>{row[col]}</td>)}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
```

### 3. Glass Modal & Alert

```tsx
// GlassModal.tsx
export function GlassModal({ open, title, children, onClose }) {
  if (!open) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
      <div className="glass-card p-6 relative max-w-lg w-full" role="dialog" aria-modal="true">
        <button onClick={onClose} className="absolute top-2 right-2 text-white text-xl">&times;</button>
        <h2 className="text-2xl font-semibold mb-4">{title}</h2>
        {children}
      </div>
    </div>
  );
}
```

### 4. Stateful Glass Toasts

```tsx
// useToast.tsx
import { useState } from "react";
export function useToast() {
  const [toast, setToast] = useState(null);
  function showToast(msg, type="success") {
    setToast({ msg, type });
    setTimeout(() => setToast(null), 3000);
  }
  function Toast() {
    if (!toast) return null;
    return (
      <div className={`fixed bottom-6 right-6 glass-card px-4 py-2 text-white transition-all z-50 ${toast.type === 'error' ? 'bg-red-700' : 'bg-emerald-600'}`}>
        {toast.msg}
      </div>
    );
  }
  return { showToast, Toast };
}
```

### 5. Agent Stepper (Glass Timeline, All CSS/JS)

```tsx
// AgentStepper.tsx
export function AgentStepper({ steps, active }) {
  return (
    <div className="flex flex-col space-y-6">
      {steps.map((step, i) => (
        <div key={step} className="flex items-center space-x-3">
          <div className={`w-6 h-6 rounded-full ${i <= active ? 'bg-primary-blue' : 'bg-glass-white'} border-2 border-glass-border flex items-center justify-center`}>
            <span className="text-xs font-bold text-white">{i + 1}</span>
          </div>
          <span className={`font-medium ${i === active ? 'text-primary-blue' : 'text-gray-400'}`}>{step}</span>
        </div>
      ))}
    </div>
  );
}
```

### 6. Reduced Motion & Accessibility-First Code

```css
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    transition: none !important;
    animation: none !important;
  }
}
```

* All focusable: `tabIndex={0}`, focus outlines, ARIA/role labels in agent cards/icons/nav.

### 7. Color/Theme Switching (CSS, Code-Only)

```tsx
// ThemeContext.tsx
import { createContext, useState, useContext } from 'react';
export const ThemeContext = createContext();
export function ThemeProvider({ children }) {
  const [accent, setAccent] = useState('blue');
  return <ThemeContext.Provider value={{ accent, setAccent }}>{children}</ThemeContext.Provider>
}
export function useTheme() { return useContext(ThemeContext); }
```

### 8. TypeScript Interfaces Everywhere

```ts
export interface AgentCardProps {
  title: string;
  icon?: React.ReactNode;
  children: React.ReactNode;
  status?: 'pending' | 'complete' | 'error';
}
```

### 9. Storybook Stories (Code Only)

* Every component in `/components/` has a `.stories.tsx` for rapid visual/props QA—generated by Copilot, run in VSCode.

---

*All above patterns/components can be built and iterated 100% inside VS Code with Copilot—no external tools/assets needed.*
